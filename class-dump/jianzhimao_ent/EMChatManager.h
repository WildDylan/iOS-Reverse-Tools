//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "EMChatManagerDebugDelegate.h"
#import "EMChatManagerDelegate.h"
#import "EMDeviceManagerDelegate.h"
#import "EMGroupDelegate.h"
#import "EMPushManagerDelegate.h"
#import "IChatManagerBase.h"
#import "IChatManagerBuddy.h"
#import "IChatManagerChat.h"
#import "IChatManagerChatroom.h"
#import "IChatManagerConversation.h"
#import "IChatManagerEncryption.h"
#import "IChatManagerGroup.h"
#import "IChatManagerPushNotification.h"
#import "IChatManagerRobot.h"
#import "IChatManagerSettingOptions.h"
#import "IChatManagerUtil.h"
#import "IEMChatProgressDelegate.h"
#import "XMPPDelegate.h"
#import "XMPPDelegateChatroom.h"
#import "XMPPDelegateGroup.h"

@class EMBackupOptions, EMError, EMGCDMulticastDelegate<EMChatManagerDelegate>, EMMessageSendBuffer, EMOfflineMessageBuffer, EMPushNotificationOptions, EMSemaphoreTracker, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString;

@interface EMChatManager : NSObject <IChatManagerChatroom, XMPPDelegateChatroom, IChatManagerPushNotification, IChatManagerChat, IEMChatProgressDelegate, IChatManagerSettingOptions, XMPPDelegate, IChatManagerBuddy, IChatManagerUtil, IChatManagerEncryption, IChatManagerRobot, IChatManagerConversation, EMChatManagerDelegate, IChatManagerGroup, XMPPDelegateGroup, EMPushManagerDelegate, EMDeviceManagerDelegate, EMChatManagerDebugDelegate, IChatManagerBase, EMGroupDelegate>
{
    EMGCDMulticastDelegate<EMChatManagerDelegate> *_delegates;
    EMSemaphoreTracker *_semaphoreTracker;
    id <IEMChatCryptor> _chatCryptor;
    id <IUsernameConverter> _usernameConverter;
    void *_chatQueueTag;
    struct dispatch_queue_s *_chat_queue;
    NSMutableDictionary *_chatSemaphoreDictionary;
    NSMutableDictionary *_chatStatusDictionary;
    NSObject *_chatStatusLock;
    EMError *_chatError;
    void *_sendMsgQueueTag;
    struct dispatch_queue_s *_sendMessageQueue;
    NSMutableArray *_willDownloadMessages;
    NSMutableSet *_downloadingMessageSet;
    NSArray *_commandProcessors;
    EMOfflineMessageBuffer *_offlineMessageBuffer;
    EMMessageSendBuffer *_messageSendBuffer;
    _Bool _shouldSendDeliveryNotification;
    NSMutableDictionary *_midDictionary;
    NSObject *_midLock;
    NSMutableDictionary *_errorDictionary;
    NSObject *_loginOrOffLock;
    long long _loginState;
    _Bool _isNeedRetryAutoLogin;
    int _retryLoginCount;
    struct dispatch_semaphore_s *_semLogin;
    EMError *_errorLogin;
    struct dispatch_semaphore_s *_semLogoff;
    NSMutableArray *_buddyList;
    NSArray *_blockedList;
    NSObject *_buddyListLock;
    long long _blockListOperation;
    NSMutableArray *_robotList;
    NSObject *_robotListLock;
    NSObject *_groupListLock;
    NSMutableDictionary *_loginGroupsDictionary;
    _Bool _hasFetchedMyGroupsFromServer;
    NSObject *_joinedChatroomsLock;
    NSMutableDictionary *_joinedChatroomsDictionary;
    NSMutableDictionary *_leavingChatroomsDictionary;
    NSObject *_conversationsLock;
    NSMutableDictionary *_conversationsDictionary;
    NSString *_apnsNickname;
    _Bool _isAutoLoginEnabled;
    _Bool _isAutoAcceptGroupInvitation;
    _Bool _isAutoFetchBuddyList;
    _Bool _isAutoDeleteConversationWhenLeaveGroup;
    _Bool _isAutoLeaveChatroomWhenLogin;
    NSObject *_backupLock;
    EMBackupOptions *_backupOptions;
    _Bool _isLockedScreen;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
@property(nonatomic) _Bool isLockedScreen; // @synthesize isLockedScreen=_isLockedScreen;
@property(retain, nonatomic) EMGCDMulticastDelegate<EMChatManagerDelegate> *delegates; // @synthesize delegates=_delegates;
@property(retain, nonatomic) EMSemaphoreTracker *semaphoreTracker; // @synthesize semaphoreTracker=_semaphoreTracker;
- (void).cxx_destruct;
- (void)unregisterNotifications;
- (void)registerNotifications;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 delegateQueue:(struct dispatch_queue_s *)arg2;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)groupDidDestroy:(id)arg1;
- (void)beKickedOutFromGroup:(id)arg1;
- (void)group:(id)arg1 occupantDidLeave:(id)arg2;
- (void)group:(id)arg1 occupantDidJoin:(id)arg2;
- (void)xmpp:(id)arg1 didReceiveChatroomInvitationFrom:(id)arg2 inviter:(id)arg3 message:(id)arg4 error:(id)arg5;
- (void)xmpp:(id)arg1 didFetchAllChatroomList:(id)arg2;
- (void)leavePendingChatrooms;
- (void)leaveAllJoinedChatrooms;
- (id)_joinedChatrooms;
- (void)asyncLeaveChatroom:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)leaveChatroom:(id)arg1 error:(id *)arg2;
- (void)asyncJoinChatroom:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)joinChatroom:(id)arg1 error:(id *)arg2;
- (void)asyncFetchOccupantsForChatroom:(id)arg1 cursor:(id)arg2 pageSize:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (id)fetchOccupantsForChatroom:(id)arg1 cursor:(id)arg2 pageSize:(long long)arg3 andError:(id *)arg4;
- (void)asyncFetchChatroomInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)fetchChatroomInfo:(id)arg1 error:(id *)arg2;
- (void)asyncFetchChatroomsFromServerWithCursor:(id)arg1 pageSize:(long long)arg2 andCompletion:(CDUnknownBlockType)arg3;
- (id)fetchChatroomsFromServerWithCursor:(id)arg1 pageSize:(long long)arg2 andError:(id *)arg3;
- (_Bool)_isLeavingChatroom:(id)arg1;
- (id)_joinedChatroomById:(id)arg1;
- (void)asyncLogoffWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncLogoff;
- (id)logoffWithError:(id *)arg1;
- (void)didConnectionChanged:(long long)arg1 fromConnectionType:(long long)arg2;
- (void)sdkAppkeyChanged;
- (void)serversAddressChanged;
- (void)xmppDidRemovedFromServer;
- (void)xmppDidLoginFromOtherDevice;
- (void)asyncRegisterNewAccount:(id)arg1 password:(id)arg2 withCompletion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncRegisterNewAccount:(id)arg1 password:(id)arg2;
- (_Bool)registerNewAccount:(id)arg1 password:(id)arg2 error:(id *)arg3;
- (void)xmppDidLogoff;
- (void)asyncLogoffWithUnbindDeviceToken:(_Bool)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncLogoffWithUnbindDeviceToken:(_Bool)arg1;
- (id)logoffWithUnbindDeviceToken:(_Bool)arg1 error:(id *)arg2;
- (void)xmpp:(id)arg1 didLoginWithInfo:(id)arg2 error:(id)arg3;
- (void)asyncLoginWithUsername:(id)arg1 password:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncLoginWithUsername:(id)arg1 password:(id)arg2;
- (id)loginWithUsername:(id)arg1 password:(id)arg2 error:(id *)arg3;
- (void)asyncAutoLoginWithUsername:(id)arg1 password:(id)arg2;
- (id)_loginFinishedWithUsername:(id)arg1 error:(id)arg2;
- (_Bool)_loginXMPP:(id)arg1 password:(id)arg2 error:(id *)arg3;
- (_Bool)_bindAndRegisterDevice;
- (_Bool)_fetchIgnoreGroupIds;
- (_Bool)_loginUsergrid:(id)arg1 password:(id)arg2 error:(id *)arg3;
- (_Bool)_validateLoginInput:(id)arg1 password:(id)arg2 error:(id *)arg3;
- (_Bool)_validateAppkey;
- (id)loadDataFromDatabase;
- (id)upgradeDBFromSDKVersion:(id)arg1 toSDKVersion:(id)arg2;
- (id)importDataToNewDatabase;
@property(readonly, nonatomic) _Bool isConnected; // @dynamic isConnected;
@property(readonly, nonatomic) _Bool isLoggedIn; // @dynamic isLoggedIn;
- (id)loadLastLoginInfo;
@property(readonly, nonatomic) NSDictionary *loginInfo; // @dynamic loginInfo;
@property(readonly, nonatomic) NSArray *ignoredGroupList; // @dynamic ignoredGroupList;
- (void)asyncIgnoreGroupPushNotification:(id)arg1 isIgnore:(_Bool)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncIgnoreGroupPushNotification:(id)arg1 isIgnore:(_Bool)arg2;
- (id)ignoreGroupPushNotification:(id)arg1 ignore:(_Bool)arg2 error:(id *)arg3;
- (void)asyncUpdatePushOptions:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncUpdatePushOptions:(id)arg1;
- (id)updatePushOptions:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *ignoredGroupIds; // @dynamic ignoredGroupIds;
@property(readonly, nonatomic) EMPushNotificationOptions *pushNotificationOptions; // @dynamic pushNotificationOptions;
- (id)asyncForwardMessage:(id)arg1 ext:(id)arg2 to:(id)arg3 messageType:(long long)arg4 progress:(id)arg5 prepare:(CDUnknownBlockType)arg6 onQueue:(struct dispatch_queue_s *)arg7 completion:(CDUnknownBlockType)arg8 onQueue:(struct dispatch_queue_s *)arg9;
- (id)asyncForwardMessage:(id)arg1 ext:(id)arg2 to:(id)arg3 messageType:(long long)arg4 progress:(id)arg5;
- (id)forwardMessage:(id)arg1 ext:(id)arg2 to:(id)arg3 messageType:(long long)arg4 progress:(id)arg5 error:(id *)arg6;
- (id)asyncForwardMessage:(id)arg1 ext:(id)arg2 to:(id)arg3 isGroup:(_Bool)arg4 progress:(id)arg5 prepare:(CDUnknownBlockType)arg6 onQueue:(struct dispatch_queue_s *)arg7 completion:(CDUnknownBlockType)arg8 onQueue:(struct dispatch_queue_s *)arg9;
- (id)asyncForwardMessage:(id)arg1 ext:(id)arg2 to:(id)arg3 isGroup:(_Bool)arg4 progress:(id)arg5;
- (id)forwardMessage:(id)arg1 ext:(id)arg2 to:(id)arg3 isGroup:(_Bool)arg4 progress:(id)arg5 error:(id *)arg6;
- (void)sendHasReadResponseForMessage:(id)arg1;
- (id)loadAllReceiptsForType:(long long)arg1;
- (id)loadReceipts:(id)arg1 type:(long long)arg2;
- (id)loadReceipt:(id)arg1 type:(long long)arg2;
- (unsigned long long)removeAllReceiptsForType:(long long)arg1;
- (void)removeReceipts:(id)arg1;
- (_Bool)removeReceipt:(id)arg1;
- (void)saveReceipts:(id)arg1;
- (_Bool)saveReceipt:(id)arg1;
- (void)setProgress:(float)arg1;
- (void)setProgress:(float)arg1 forMessage:(id)arg2;
- (void)setProgress:(float)arg1 forMessage:(id)arg2 forMessageBody:(id)arg3;
- (void)xmpp:(id)arg1 didReceiveMessage:(id)arg2;
- (_Bool)_didContainsCommandInMessage:(id)arg1;
- (id)_deserializeChat:(id)arg1;
- (_Bool)_isContainNullWithMessage:(id)arg1;
- (id)_chatdataToMessage:(id)arg1;
- (_Bool)_needDownloadForMessage:(id)arg1;
- (void)resendMessagesIfNecessary;
- (id)_preForwardMessage:(id)arg1;
- (id)_duplicateMessageToBufferDir:(id)arg1;
- (id)_duplicateMessageBodyToBufferDir:(id)arg1;
- (id)_duplicateChatLocation:(id)arg1;
- (id)_duplicateChatText:(id)arg1;
- (id)_duplicateChatCommand:(id)arg1;
- (id)_duplicateChatImageToBufferDir:(id)arg1;
- (id)_duplicateChatVideoToBufferDir:(id)arg1;
- (id)_duplicateChatVoiceToBufferDir:(id)arg1;
- (id)_duplicateChatFileToBufferDir:(id)arg1;
- (id)asyncResendMessage:(id)arg1 progress:(id)arg2 prepare:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4 completion:(CDUnknownBlockType)arg5 onQueue:(struct dispatch_queue_s *)arg6;
- (id)asyncResendMessage:(id)arg1 progress:(id)arg2;
- (id)resendMessage:(id)arg1 progress:(id)arg2 error:(id *)arg3;
- (id)_formattedMessageBeforeResend:(id)arg1 error:(id *)arg2;
- (id)asyncSendMessage:(id)arg1 progress:(id)arg2 prepare:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4 completion:(CDUnknownBlockType)arg5 onQueue:(struct dispatch_queue_s *)arg6;
- (id)asyncSendMessage:(id)arg1 progress:(id)arg2;
- (id)sendMessage:(id)arg1 progress:(id)arg2 error:(id *)arg3;
- (_Bool)_sendMessage:(id)arg1 progress:(id)arg2 error:(id *)arg3;
- (id)_messageTypeStr:(id)arg1;
- (id)_formattedMessageBeforeSend:(id)arg1 error:(id *)arg2;
- (id)_uploadMessage:(id)arg1 progress:(id)arg2;
- (id)_filePathForUploadWithMessageBody:(id)arg1 message:(id)arg2;
- (id)_uploadAppendixWithMessageBody:(id)arg1 message:(id)arg2 localPath:(id)arg3 token:(id)arg4 uploadApi:(id)arg5 progress:(id)arg6;
- (id)_uploadThumbnailWithMessageBody:(id)arg1 message:(id)arg2 localPath:(id)arg3 token:(id)arg4 uploadApi:(id)arg5;
- (id)_adjustMessageDirectoryForSendMessage:(id)arg1;
- (id)_adjustMessageBodyDirectory:(id)arg1 forChatter:(id)arg2;
- (id)_adjustChatFile:(id)arg1 forChatter:(id)arg2;
- (id)_adjustChatImage:(id)arg1 forChatter:(id)arg2;
- (id)_adjustChatVideo:(id)arg1 forChatter:(id)arg2;
- (id)_adjustChatVoice:(id)arg1 forChatter:(id)arg2;
- (id)encryptedFile:(id)arg1 message:(id)arg2;
- (id)serializeChat:(id)arg1;
- (id)nickForAccount:(id)arg1 inGroupId:(id)arg2;
- (id)fromInMessage:(id)arg1;
- (id)messageToRawString:(id)arg1;
- (void)xmppDidDisconnect;
- (void)xmpp:(id)arg1 didReceiveHasDeliveredResponse:(id)arg2;
- (void)xmpp:(id)arg1 didReceiveHasReadResponse:(id)arg2;
- (void)xmpp:(id)arg1 didReceiveReceiptReq:(id)arg2;
- (void)xmpp:(id)arg1 didMessageSendFailure:(id)arg2;
- (void)xmpp:(id)arg1 didMessageSendSuccess:(id)arg2;
- (void)sendReadAckForMessage:(id)arg1;
- (void)sendHasDeliveredResponseForMessage:(id)arg1;
- (void)sendDeliveredAck:(id)arg1;
- (void)sendReadAck:(id)arg1;
@property(nonatomic) _Bool autoFetchBuddyList; // @dynamic autoFetchBuddyList;
@property(retain, nonatomic) NSString *nickname; // @dynamic nickname;
- (unsigned long long)offlineMessageCacheSeconds;
- (void)setOfflineMessageCacheSeconds:(unsigned long long)arg1;
- (void)disableAutoDeleteConversatonWhenLeaveGroup;
- (void)enableAutoDeleteConversatonWhenLeaveGroup;
@property(nonatomic) _Bool isAutoDeleteConversationWhenLeaveGroup;
- (void)disableDeliveryNotification;
- (void)enableDeliveryNotification;
- (_Bool)saveSDKOptionsToDB;
- (void)saveAutoLoginEnabledToDB:(_Bool)arg1;
- (void)loadSDKOptionsFromDatabase;
- (void)disableAutoLeaveChatroom;
- (void)enableAutoLeaveChatroom;
@property(nonatomic) _Bool isAutoLeaveChatroomWhenLogin;
- (void)disableUseIp;
- (void)enableUseIp;
@property(nonatomic) _Bool isUseIp; // @dynamic isUseIp;
- (void)disableAutoFetchBuddyList;
- (void)enableAutoFetchBuddyList;
@property(nonatomic) _Bool isAutoFetchBuddyList; // @dynamic isAutoFetchBuddyList;
@property(nonatomic) _Bool isAutoAcceptGroupInvitation; // @dynamic isAutoAcceptGroupInvitation;
- (void)disableAutoLogin;
- (void)enableAutoLogin;
@property(nonatomic) _Bool isAutoLoginEnabled; // @dynamic isAutoLoginEnabled;
@property(retain, nonatomic) NSString *apnsNickname; // @dynamic apnsNickname;
- (void)asyncFetchBlockListWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (_Bool)addBuddy:(id)arg1 withNickname:(id)arg2 message:(id)arg3 toGroups:(id)arg4 error:(id *)arg5;
- (_Bool)addBuddy:(id)arg1 withNickname:(id)arg2 message:(id)arg3 error:(id *)arg4;
@property(readonly, nonatomic) NSArray *buddyGroupList; // @dynamic buddyGroupList;
- (void)xmpp:(id)arg1 didUpdateBuddyList:(id)arg2 changedBuddies:(id)arg3 isAdd:(_Bool)arg4;
- (void)xmpp:(id)arg1 didUpdateBuddy:(id)arg2;
- (void)xmpp:(id)arg1 didAcceptBuddySucceed:(id)arg2;
- (void)xmpp:(id)arg1 didRejectedByBuddy:(id)arg2;
- (void)xmpp:(id)arg1 didAcceptedByBuddy:(id)arg2;
- (void)xmpp:(id)arg1 didRemovedByBuddy:(id)arg2;
- (void)xmpp:(id)arg1 didReceiveBuddyRequest:(id)arg2 message:(id)arg3;
- (void)xmpp:(id)arg1 didFetchBlockedListFailure:(id)arg2;
- (void)xmpp:(id)arg1 didFetchBlockedListSucceed:(id)arg2;
- (void)asyncFetchBlockedListWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncFetchBlockedList;
- (id)fetchBlockedList:(id *)arg1;
- (void)xmppBuddyListIsUpToData:(id)arg1;
- (void)xmppDidFetchedBuddyList:(id)arg1 buddyList:(id)arg2;
- (void)loadAllBuddiesFromDatabase;
- (void)asyncFetchBuddyListWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncFetchBuddyList;
- (id)fetchBuddyListWithError:(id *)arg1;
- (id)unblockBuddy:(id)arg1;
- (void)asyncUnblockBuddy:(id)arg1 withCompletion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncUnblockBuddy:(id)arg1;
- (id)blockBuddy:(id)arg1 relationship:(long long)arg2;
- (void)asyncBlockBuddy:(id)arg1 relationship:(long long)arg2 withCompletion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncBlockBuddy:(id)arg1 relationship:(long long)arg2;
- (_Bool)rejectBuddyRequest:(id)arg1 reason:(id)arg2 error:(id *)arg3;
- (_Bool)acceptBuddyRequest:(id)arg1 error:(id *)arg2;
- (_Bool)removeBuddy:(id)arg1 removeFromRemote:(_Bool)arg2 error:(id *)arg3;
- (_Bool)addBuddy:(id)arg1 message:(id)arg2 toGroups:(id)arg3 error:(id *)arg4;
- (_Bool)addBuddy:(id)arg1 message:(id)arg2 error:(id *)arg3;
- (id)validBuddiesFromBuddyList:(id)arg1;
- (id)loadBuddyList;
- (id)xmppBuddyDataListFromBuddyList:(id)arg1;
- (id)xmppBuddyDataFromBuddy:(id)arg1;
- (id)embuddyListWithXMPPBuddyList:(id)arg1;
- (id)buddyWithXMPPBuddy:(id)arg1;
- (id)username2Jid:(id)arg1;
- (id)jid2Username:(id)arg1;
@property(readonly, nonatomic) NSArray *blockedList; // @dynamic blockedList;
@property(readonly, nonatomic) NSArray *buddyList; // @dynamic buddyList;
- (void)cancelRestoreBackups;
- (void)asyncRestoreBackupsWithProgress:(id)arg1 statusCompletion:(CDUnknownBlockType)arg2;
- (_Bool)_importBackupsWithRootPath:(id)arg1;
- (id)_decompressionBackupsWithPaths:(id)arg1 rootPath:(id)arg2;
- (id)_downloadBackupsWithPaths:(id)arg1 rootPath:(id)arg2 totalSize:(float)arg3 progress:(id)arg4 error:(id *)arg5;
- (void)cancelBackupMessages;
- (void)asyncBackupMessagesWithProgress:(id)arg1 statusCompletion:(CDUnknownBlockType)arg2;
- (id)_uploadBackupsWithPaths:(id)arg1 totalSize:(float)arg2 progress:(id)arg3 error:(id *)arg4;
- (id)_compressionFilesWithDBPath:(id)arg1 filesPath:(id)arg2 rootPath:(id)arg3 totalSize:(unsigned long long *)arg4;
- (void)_asyncDeleteBackupsWithPaths:(id)arg1;
- (id)_allFilesAtPath:(id)arg1;
- (id)_checkBeforeMessagesOption;
- (void)xmppDidReconnect;
- (void)xmppWillReconnect;
- (void)asyncFetchMessageThumbnail:(id)arg1 progress:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncFetchMessageThumbnail:(id)arg1 progress:(id)arg2;
- (id)fetchMessageThumbnail:(id)arg1 progress:(id)arg2 error:(id *)arg3;
- (void)asyncFetchMessage:(id)arg1 progress:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncFetchMessage:(id)arg1 progress:(id)arg2;
- (id)fetchMessage:(id)arg1 fullDownload:(_Bool)arg2 progress:(id)arg3 error:(id *)arg4;
- (id)fetchMessage:(id)arg1 progress:(id)arg2 error:(id *)arg3;
- (id)_downloadMessage:(id)arg1 token:(id)arg2 fullDownload:(_Bool)arg3 progress:(id)arg4;
- (id)_downloadPathsForMessageBody:(id)arg1 isEncryptedOnServer:(_Bool)arg2 fullDownload:(_Bool)arg3;
- (id)remoteUrlForMessageBody:(id)arg1;
@property(retain, nonatomic) id <IEMChatCryptor> chatCryptor; // @dynamic chatCryptor;
- (void)addMessageToDownloadQueue:(id)arg1;
- (void)asyncFetchAttachmentForMessage:(id)arg1;
- (void)_removeMessageFromDownloadingQueue:(id)arg1;
- (void)_downloadNextMessageAttachment;
- (id)_downloadAttachmentsForMessage:(id)arg1 performFullDownload:(_Bool)arg2 error:(id *)arg3;
- (id)_downloadMessageBody:(id)arg1 isEncryptedOnServer:(_Bool)arg2 token:(id)arg3;
- (id)_downloadPathsForMessageBody:(id)arg1 isEncryptedOnServer:(_Bool)arg2;
- (id)_decryptFile:(id)arg1 message:(id)arg2;
- (void)asyncFetchRobotsFromServerWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchRobotsFromServerWithError:(id *)arg1;
@property(readonly, nonatomic) NSArray *robotList; // @dynamic robotList;
- (long long)saveMessages:(id)arg1;
- (_Bool)importMessage:(id)arg1 append2Chat:(_Bool)arg2;
- (_Bool)saveMessage:(id)arg1;
- (unsigned long long)totalUnreadMessagesCount;
- (unsigned long long)unreadConversationsCount;
- (_Bool)removeAllConversationsWithDeleteMessages:(_Bool)arg1;
- (unsigned long long)removeConversationsByChatters:(id)arg1 deleteMessages:(_Bool)arg2;
- (_Bool)removeConversationByChatter:(id)arg1 deleteMessages:(_Bool)arg2;
- (long long)saveAllConversations;
- (id)loadAllConversationsFromDatabase;
- (id)loadAllConversations;
- (id)conversationForChatter:(id)arg1 isGroup:(_Bool)arg2;
- (_Bool)updateMessageToDB:(id)arg1;
- (void)didUnreadMessagesChanged;
- (_Bool)removeAllMessagesByChatter:(id)arg1 append2Chat:(_Bool)arg2;
- (_Bool)removeAllMessagesByChatter:(id)arg1;
- (_Bool)insertMessagesToDB:(id)arg1 forChatter:(id)arg2 append2Chat:(_Bool)arg3;
- (long long)insertMessagesToDB:(id)arg1;
- (_Bool)insertMessageToDB:(id)arg1 append2Chat:(_Bool)arg2;
- (_Bool)insertMessageToDB:(id)arg1;
- (id)searchMessagesWithCriteria:(id)arg1 withChatter:(id)arg2;
- (id)searchMessagesWithCriteria:(id)arg1;
- (unsigned long long)unreadMessagesCountForConversation:(id)arg1;
- (unsigned long long)loadTotalUnreadMessagesCountFromDatabase;
- (_Bool)removeAllConversationsWithDeleteMessages:(_Bool)arg1 append2Chat:(_Bool)arg2;
- (unsigned long long)removeConversationsByChatters:(id)arg1 deleteMessages:(_Bool)arg2 append2Chat:(_Bool)arg3;
- (_Bool)removeConversationByChatter:(id)arg1 deleteMessages:(_Bool)arg2 append2Chat:(_Bool)arg3;
- (unsigned long long)insertConversationsToDB:(id)arg1 append2Chat:(_Bool)arg2;
- (_Bool)insertConversationToDB:(id)arg1 append2Chat:(_Bool)arg2;
- (id)loadAllConversationsFromDatabaseWithAppend2Chat:(_Bool)arg1;
- (id)conversationForChatter:(id)arg1 conversationType:(long long)arg2;
- (id)_conversationForChatter:(id)arg1 conversationType:(long long)arg2 append2Chat:(_Bool)arg3;
@property(readonly, nonatomic) NSArray *conversations; // @dynamic conversations;
- (void)sendPromptKey:(id)arg1;
- (void)changeAllDeliveringMessageToFailed;
- (void)_clearMemoryInfo;
- (void)_clearForLogoff;
- (void)saveMessageDownloadStatus:(id)arg1 fullDownload:(_Bool)arg2 downloadStatus:(unsigned long long)arg3;
- (id)_combineConversation:(id)arg1 withConversation:(id)arg2;
- (void)setupCommandProcessors;
- (long long)conversationTypeFromMessageType:(long long)arg1;
- (id)conversationForChatter:(id)arg1;
- (void)rejectInvitationForGroup:(id)arg1 toInviter:(id)arg2 reason:(id)arg3;
- (void)asyncAcceptInvitationFromGroup:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncAcceptInvitationFromGroup:(id)arg1;
- (id)acceptInvitationFromGroup:(id)arg1 error:(id *)arg2;
- (void)asyncFetchAllPrivateGroupsWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncFetchAllPrivateGroups;
- (id)fetchAllPrivateGroupsWithError:(id *)arg1;
- (void)asyncChangeAffiliation:(long long)arg1 forOccupants:(id)arg2 inGroup:(id)arg3 completion:(CDUnknownBlockType)arg4 onQueue:(struct dispatch_queue_s *)arg5;
- (void)asyncChangeAffiliation:(long long)arg1 forOccupants:(id)arg2 inGroup:(id)arg3;
- (id)changeAffiliation:(long long)arg1 forOccupants:(id)arg2 inGroup:(id)arg3 error:(id *)arg4;
- (void)asyncChangePassword:(id)arg1 forGroup:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncChangePassword:(id)arg1 forGroup:(id)arg2;
- (id)changePassword:(id)arg1 forGroup:(id)arg2 error:(id *)arg3;
- (void)asyncCreatePublicGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 completion:(CDUnknownBlockType)arg5 onQueue:(struct dispatch_queue_s *)arg6;
- (void)asyncCreatePublicGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4;
- (id)createPublicGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 error:(id *)arg5;
- (void)asyncCreatePrivateGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 completion:(CDUnknownBlockType)arg5 onQueue:(struct dispatch_queue_s *)arg6;
- (void)asyncCreatePrivateGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4;
- (id)createPrivateGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 error:(id *)arg5;
- (id)loadAllMyGroupsFromDatabase;
- (void)xmpp:(id)arg1 didReceiveDestroyedFromGroup:(id)arg2 fromJID:(id)arg3 groupname:(id)arg4 error:(id)arg5;
- (void)xmpp:(id)arg1 didReceiveBeKickFromGroup:(id)arg2 fromJID:(id)arg3 groupname:(id)arg4 error:(id)arg5;
- (void)xmpp:(id)arg1 didReceiveAcceptApplyJoinGroup:(id)arg2 fromJID:(id)arg3 toGroupname:(id)arg4 error:(id)arg5;
- (void)xmpp:(id)arg1 didReceiveRejectApplyJoinGroupFrom:(id)arg2 toGroupname:(id)arg3 reason:(id)arg4 error:(id)arg5;
- (void)xmpp:(id)arg1 didReceiveApplyJoinGroup:(id)arg2 fromJID:(id)arg3 toGroupname:(id)arg4 reason:(id)arg5 error:(id)arg6;
- (void)xmpp:(id)arg1 didReceiveGroupRejectFrom:(id)arg2 invitee:(id)arg3 reason:(id)arg4 error:(id)arg5;
- (void)xmpp:(id)arg1 didReceiveGroupInvitationFrom:(id)arg2 inviter:(id)arg3 message:(id)arg4 error:(id)arg5;
- (void)_asyncAcceptInvitationFromGroup:(id)arg1;
- (id)_acceptInvitationFromGroup:(id)arg1 error:(id *)arg2;
- (void)asyncUnblockGroup:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (id)unblockGroup:(id)arg1 error:(id *)arg2;
- (void)asyncBlockGroup:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (id)blockGroup:(id)arg1 error:(id *)arg2;
- (void)asyncSearchPublicGroupWithGroupId:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (id)searchPublicGroupWithGroupId:(id)arg1 error:(id *)arg2;
- (void)asyncApplyJoinPublicGroup:(id)arg1 withGroupname:(id)arg2 message:(id)arg3 completion:(CDUnknownBlockType)arg4 onQueue:(struct dispatch_queue_s *)arg5;
- (void)asyncApplyJoinPublicGroup:(id)arg1 withGroupname:(id)arg2 message:(id)arg3;
- (id)applyJoinPublicGroup:(id)arg1 withGroupname:(id)arg2 message:(id)arg3 error:(id *)arg4;
- (void)asyncJoinAnonymousPublicGroup:(id)arg1 nickname:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncJoinAnonymousPublicGroup:(id)arg1 nickname:(id)arg2;
- (id)joinAnonymousPublicGroup:(id)arg1 nickname:(id)arg2 error:(id *)arg3;
- (void)asyncJoinPublicGroup:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncJoinPublicGroup:(id)arg1;
- (id)joinPublicGroup:(id)arg1 error:(id *)arg2;
- (id)_joinPublicGroup:(id)arg1 nickname:(id)arg2 error:(id *)arg3;
- (void)xmpp:(id)arg1 didFetchAllPublicGroups:(id)arg2;
- (void)asyncFetchPublicGroupsFromServerWithCursor:(id)arg1 pageSize:(long long)arg2 andCompletion:(CDUnknownBlockType)arg3;
- (id)fetchPublicGroupsFromServerWithCursor:(id)arg1 pageSize:(long long)arg2 andError:(id *)arg3;
- (void)asyncFetchAllPublicGroupsWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncFetchAllPublicGroups;
- (id)fetchAllPublicGroupsWithError:(id *)arg1;
- (void)xmpp:(id)arg1 didFetchMyGroupsList:(id)arg2;
- (void)asyncFetchMyGroupsListWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncFetchMyGroupsList;
- (id)fetchMyGroupsListWithError:(id *)arg1;
- (void)asyncFetchGroupBansList:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncFetchGroupBansList:(id)arg1;
- (id)fetchGroupBansList:(id)arg1 error:(id *)arg2;
- (void)asyncFetchGroupInfo:(id)arg1 includesOccupantList:(_Bool)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncFetchGroupInfo:(id)arg1 includesOccupantList:(_Bool)arg2;
- (id)fetchGroupInfo:(id)arg1 includesOccupantList:(_Bool)arg2 error:(id *)arg3;
- (void)asyncFetchOccupantList:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncFetchOccupantList:(id)arg1;
- (id)fetchOccupantList:(id)arg1 error:(id *)arg2;
- (void)asyncFetchGroupInfo:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncFetchGroupInfo:(id)arg1;
- (id)fetchGroupInfo:(id)arg1 error:(id *)arg2;
- (void)rejectApplyJoinGroup:(id)arg1 groupname:(id)arg2 toApplicant:(id)arg3 reason:(id)arg4;
- (void)asyncAcceptApplyJoinGroup:(id)arg1 groupname:(id)arg2 applicant:(id)arg3 completion:(CDUnknownBlockType)arg4 onQueue:(struct dispatch_queue_s *)arg5;
- (void)asyncAcceptApplyJoinGroup:(id)arg1 groupname:(id)arg2 applicant:(id)arg3;
- (void)acceptApplyJoinGroup:(id)arg1 groupname:(id)arg2 applicant:(id)arg3 error:(id *)arg4;
- (void)asyncChangeDescription:(id)arg1 forGroup:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncChangeDescription:(id)arg1 forGroup:(id)arg2;
- (id)changeDescription:(id)arg1 forGroup:(id)arg2 error:(id *)arg3;
- (void)asyncChangeGroupSubject:(id)arg1 forGroup:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncChangeGroupSubject:(id)arg1 forGroup:(id)arg2;
- (id)changeGroupSubject:(id)arg1 forGroup:(id)arg2 error:(id *)arg3;
- (void)asyncUnblockOccupants:(id)arg1 forGroup:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncUnblockOccupants:(id)arg1 forGroup:(id)arg2;
- (id)unblockOccupants:(id)arg1 forGroup:(id)arg2 error:(id *)arg3;
- (void)asyncBlockOccupants:(id)arg1 fromGroup:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncBlockOccupants:(id)arg1 fromGroup:(id)arg2;
- (id)blockOccupants:(id)arg1 fromGroup:(id)arg2 error:(id *)arg3;
- (void)asyncRemoveOccupants:(id)arg1 fromGroup:(id)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncRemoveOccupants:(id)arg1 fromGroup:(id)arg2;
- (id)removeOccupants:(id)arg1 fromGroup:(id)arg2 error:(id *)arg3;
- (void)asyncAddOccupants:(id)arg1 toGroup:(id)arg2 welcomeMessage:(id)arg3 completion:(CDUnknownBlockType)arg4 onQueue:(struct dispatch_queue_s *)arg5;
- (void)asyncAddOccupants:(id)arg1 toGroup:(id)arg2 welcomeMessage:(id)arg3;
- (id)addOccupants:(id)arg1 toGroup:(id)arg2 welcomeMessage:(id)arg3 error:(id *)arg4;
- (void)group:(id)arg1 didLeaveWithReason:(long long)arg2;
- (void)asyncDestroyGroup:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncDestroyGroup:(id)arg1;
- (id)destroyGroup:(id)arg1 error:(id *)arg2;
- (void)asyncLeaveGroup:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncLeaveGroup:(id)arg1;
- (id)leaveGroup:(id)arg1 error:(id *)arg2;
- (id)_checkBeforeExitOrDestroyGroup:(id)arg1 isDestroy:(_Bool)arg2 error:(id *)arg3;
- (void)asyncCreateAnonymousGroupWithSubject:(id)arg1 description:(id)arg2 initialWelcomeMessage:(id)arg3 nickname:(id)arg4 styleSetting:(id)arg5 completion:(CDUnknownBlockType)arg6 onQueue:(struct dispatch_queue_s *)arg7;
- (void)asyncCreateAnonymousGroupWithSubject:(id)arg1 description:(id)arg2 initialWelcomeMessage:(id)arg3 nickname:(id)arg4 styleSetting:(id)arg5;
- (id)createAnonymousGroupWithSubject:(id)arg1 description:(id)arg2 initialWelcomeMessage:(id)arg3 nickname:(id)arg4 styleSetting:(id)arg5 error:(id *)arg6;
- (void)asyncCreateGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 styleSetting:(id)arg5 completion:(CDUnknownBlockType)arg6 onQueue:(struct dispatch_queue_s *)arg7;
- (void)asyncCreateGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 styleSetting:(id)arg5;
- (id)createGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 styleSetting:(id)arg5 error:(id *)arg6;
- (id)_createGroupWithSubject:(id)arg1 description:(id)arg2 invitees:(id)arg3 initialWelcomeMessage:(id)arg4 styleSetting:(id)arg5 nickname:(id)arg6 isAnonymousGroup:(_Bool)arg7 error:(id *)arg8;
- (id)loadAllMyGroupsFromDatabaseWithAppend2Chat:(_Bool)arg1;
@property(readonly, nonatomic) NSArray *groupList; // @dynamic groupList;
- (id)_nickFromDelegateForAccount:(id)arg1 inGroup:(id)arg2;
- (id)_generateNickForAccount:(id)arg1 inGroup:(id)arg2;
- (void)_asyncJoinMyGroups:(id)arg1;
- (id)_joinedGroupById:(id)arg1;
- (void)_removeLoginGroupById:(id)arg1 append2Chat:(_Bool)arg2;
- (void)_resetLoginGroups:(id)arg1;
- (id)_loginGroupById:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

