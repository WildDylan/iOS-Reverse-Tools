//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "IPushManagerBase.h"
#import "IPushManagerDevice.h"

@class EMGCDMulticastDelegate<EMPushManagerDelegate>, EMPushNotificationOptions, NSArray, NSString;

@interface EMPushManager : NSObject <IPushManagerDevice, IPushManagerBase>
{
    EMGCDMulticastDelegate<EMPushManagerDelegate> *_delegates;
    struct dispatch_queue_s *_push_queue;
    void *_pushQueueTag;
    NSString *_deviceToken;
    _Bool _isDeviceTokenReady;
    _Bool _isRegister;
    _Bool _isBindDevice;
    unsigned long long _bindDeviceRetryTime;
    struct dispatch_source_s *_rebindTimer;
    NSArray *_ignoredGroupIds;
    EMPushNotificationOptions *_pushOptions;
    _Bool _hasFetchedPushConfigFromServer;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 delegateQueue:(struct dispatch_queue_s *)arg2;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)unregisterNotifications;
- (void)registerNotifications;
- (void)asyncIgnoreGroupPushNotification:(id)arg1 isIgnore:(_Bool)arg2 completion:(CDUnknownBlockType)arg3 onQueue:(struct dispatch_queue_s *)arg4;
- (void)asyncIgnoreGroupPushNotification:(id)arg1 isIgnore:(_Bool)arg2;
- (id)ignoreGroupPushNotification:(id)arg1 isIgnore:(_Bool)arg2 error:(id *)arg3;
- (id)loadIgnoredGroupIdsFromDatabase;
@property(nonatomic) _Bool hasFetchedPushConfigFromServer; // @dynamic hasFetchedPushConfigFromServer;
@property(readonly, nonatomic) NSArray *ignoredGroupIds; // @dynamic ignoredGroupIds;
- (id)updateServerPushNotification:(id)arg1 error:(id *)arg2;
- (id)setPushNotificationOptionsWithDict:(id)arg1;
@property(readonly, nonatomic) EMPushNotificationOptions *pushNotificationOptions; // @dynamic pushNotificationOptions;
- (void)clearPushManager;
- (id)updateIgnoredGroupIds:(id)arg1;
@property(readonly, nonatomic) NSString *deviceToken; // @dynamic deviceToken;
@property(nonatomic) _Bool isBindDevice; // @dynamic isBindDevice;
@property(readonly, nonatomic) _Bool isDeviceTokenReady; // @dynamic isDeviceTokenReady;
@property(readonly, nonatomic) _Bool hasRegisteredDevice;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)application:(id)arg1 didReceiveRemoteNotification:(id)arg2 fetchCompletionHandler:(CDUnknownBlockType)arg3;
- (void)application:(id)arg1 didReceiveRemoteNotification:(id)arg2;
- (void)application:(id)arg1 didFailToRegisterForRemoteNotificationsWithError:(id)arg2;
- (void)application:(id)arg1 didRegisterForRemoteNotificationsWithDeviceToken:(id)arg2;
- (_Bool)application:(id)arg1 didFinishLaunchingWithOptions:(id)arg2;
- (_Bool)application:(id)arg1 willFinishLaunchingWithOptions:(id)arg2;
- (void)applicationDidFinishLaunching:(id)arg1;
- (void)asyncUnbindDeviceWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncUnbindDevice;
- (_Bool)unbindDeviceWithError:(id *)arg1;
- (void)rebindAfterTimeInterval:(double)arg1;
- (void)cancelRebinding;
- (void)asyncBindDeviceWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncBindDevice;
- (_Bool)bindDeviceWithError:(id *)arg1;
- (void)asyncFetchIgnoreGroupIdsWithCompletion:(CDUnknownBlockType)arg1 onQueue:(struct dispatch_queue_s *)arg2;
- (void)asyncFetchIgnoreGroupIds;
- (id)fetchIgnoreGroupIdsWithError:(id *)arg1;
- (void)asyncRegisterDeviceToken:(id)arg1 completion:(CDUnknownBlockType)arg2 onQueue:(struct dispatch_queue_s *)arg3;
- (void)asyncRegisterDeviceToken:(id)arg1;
- (_Bool)registerDeviceToken:(id)arg1 error:(id *)arg2;
- (long long)_getBindDeviceDelay;
- (void)_handleRemoteNotification:(id)arg1;
- (_Bool)_hasRegisteredDevice;
- (id)_deviceTokenFromDisk;
- (void)_saveDeviceTokenToDisk;
- (id)_extractTokenFromRawData:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

