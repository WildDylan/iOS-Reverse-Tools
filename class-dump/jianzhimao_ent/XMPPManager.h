//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "EMDeviceManagerDelegate.h"
#import "XMPPAutoPingDelegate.h"
#import "XMPPJingleDelegate.h"
#import "XMPPMUCDelegate.h"
#import "XMPPPrivacyDelegate.h"
#import "XMPPReconnectDelegate.h"
#import "XMPPRoomDelegate.h"
#import "XMPPRoomMemoryStorageDelegate.h"
#import "XMPPRosterDelegate.h"
#import "XMPPStreamDelegate.h"

@class EMGCDMulticastDelegate<XMPPDelegate>, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSString, XMPPCapabilities, XMPPCapabilitiesCoreDataStorage, XMPPCompression, XMPPMUC, XMPPPrivacy, XMPPRoster, XMPPRosterMemoryStorage, XMPPStream;

@interface XMPPManager : NSObject <XMPPReconnectDelegate, EMDeviceManagerDelegate, XMPPRosterDelegate, XMPPStreamDelegate, XMPPMUCDelegate, XMPPPrivacyDelegate, XMPPRoomDelegate, XMPPRoomMemoryStorageDelegate, XMPPAutoPingDelegate, XMPPJingleDelegate>
{
    XMPPStream *_xmppStream;
    XMPPRoster *_xmppRoster;
    XMPPRosterMemoryStorage *_xmppRosterStorage;
    XMPPCapabilities *_xmppCapabilities;
    XMPPCapabilitiesCoreDataStorage *_xmppCapabilitiesStorage;
    XMPPMUC *_xmppMuc;
    XMPPCompression *_xmppCompression;
    XMPPPrivacy *_xmppPrivacy;
    id <IXMPPJingle> _xmppJingle;
    _Bool _customCertEvaluation;
    struct dispatch_queue_s *_xmppQueue;
    void *_queueTag;
    EMGCDMulticastDelegate<XMPPDelegate> *_delegates;
    id <IUsernameConverter> _usernameConverter;
    NSObject *_gLock;
    long long _loginState;
    NSObject *_buddyListLock;
    NSMutableArray *_buddyList;
    NSArray *_blockedBuddyJIDs;
    NSMutableArray *_whiteBuddyList;
    NSObject *_groupListLock;
    NSObject *_groupDictLock;
    NSMutableArray *_groupList;
    NSMutableDictionary *_groupDict;
    NSObject *_chatroomDictLock;
    NSMutableDictionary *_chatroomDict;
    long long _mTimestamp;
    int _sameTimestampCount;
    NSMutableArray *_lastMessages;
    NSMutableArray *_pendingChats;
    NSObject *_pendingChatsLock;
    NSMutableDictionary *_callXmppSessionsDic;
    NSObject *_callXmppSessionsLock;
    struct dispatch_queue_s *_xmppCallQueue;
    void *_xmppCallQueueTag;
    struct dispatch_source_s *_reconnectTimer;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (void).cxx_destruct;
@property(readonly, nonatomic) XMPPStream *xmppStream; // @dynamic xmppStream;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 delegateQueue:(struct dispatch_queue_s *)arg2;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (_Bool)_sendRawMessage:(id)arg1 to:(id)arg2 isGroupChat:(_Bool)arg3 messageId:(id)arg4 needEncrypt:(_Bool)arg5 isChatroom:(_Bool)arg6 isAnonymousChat:(_Bool)arg7;
- (_Bool)_sendRawMessage:(id)arg1 to:(id)arg2 isGroupChat:(_Bool)arg3 messageId:(id)arg4 needEncrypt:(_Bool)arg5 isChatroom:(_Bool)arg6;
- (_Bool)sendMessage:(id)arg1;
- (void)_handleReconnect;
- (void)_handleBufferedChats;
- (void)xmppStream:(id)arg1 didReceiveGroupMessage:(id)arg2 fromOccupant:(id)arg3;
- (void)xmppStream:(id)arg1 isReceiveGroupMessage:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveMessage:(id)arg2;
- (void)sendDelivered:(id)arg1;
- (void)sendAck:(id)arg1;
- (_Bool)_isDuplicatedMessage:(id)arg1;
- (long long)_timestampFromXMPPMessage:(id)arg1;
- (_Bool)isSentFromMyself:(id)arg1;
- (long long)remoteChatStateFromMessage:(id)arg1;
- (_Bool)_isDestroyRoomPresence:(id)arg1;
- (_Bool)_isKickOffFromMessage:(id)arg1;
- (_Bool)_isLeavingRoomFromMessage:(id)arg1;
- (_Bool)_isInvitationFromMessage:(id)arg1;
- (void)_dealInvitationWithMessage:(id)arg1;
- (void)_dealLeaveGroupWithMessage:(id)arg1 reason:(long long)arg2;
- (void)_handleNotifyWithXMPPStream:(id)arg1 withMessage:(id)arg2;
- (void)logoff;
- (_Bool)loginWithJid:(id)arg1 password:(id)arg2 error:(id *)arg3;
@property(readonly, nonatomic) _Bool isLoggedIn; // @dynamic isLoggedIn;
@property(readonly, nonatomic) NSDictionary *loginInfo;
- (id)fetchBuddyList;
- (void)xmppPrivacy:(id)arg1 didNotReceiveListWithName:(id)arg2 error:(id)arg3;
- (void)xmppPrivacy:(id)arg1 didReceiveListWithName:(id)arg2 items:(id)arg3;
- (void)xmppPrivacy:(id)arg1 didReceivePushWithListName:(id)arg2;
- (id)unblockBuddy:(id)arg1;
- (id)blockBuddy:(id)arg1 relationship:(id)arg2;
- (id)fetchBlockedJids;
@property(readonly, nonatomic) NSArray *blockedBuddyJIDs; // @dynamic blockedBuddyJIDs;
- (id)removeBlockJid:(id)arg1 fromItems:(id)arg2;
- (id)addBlockJid:(id)arg1 toItems:(id)arg2 relationship:(id)arg3;
- (id)elementWithBlockItem:(id)arg1;
- (id)specialBuddiesUsernameWithElementItems:(id)arg1;
- (id)errorWithXMLElement:(id)arg1;
- (id)errorWithXMPPIQ:(id)arg1;
@property(readonly, nonatomic) NSArray *buddyGroupList; // @dynamic buddyGroupList;
@property(readonly, nonatomic) NSMutableArray *buddyList; // @dynamic buddyList;
- (void)xmppRosterIsUpToDate:(id)arg1;
- (void)xmppRoster:(id)arg1 didRemoveResource:(id)arg2 withUser:(id)arg3;
- (void)xmppRoster:(id)arg1 didAddResource:(id)arg2 withUser:(id)arg3;
- (void)xmppRoster:(id)arg1 didRemovedByBuddy:(id)arg2;
- (void)xmppRoster:(id)arg1 didUpdateUser:(id)arg2;
- (void)groupListUpdated:(id)arg1 isAdded:(_Bool)arg2;
- (void)buddyListUpdated:(id)arg1 isAdded:(_Bool)arg2;
- (void)xmppRoster:(id)arg1 didRemoveUser:(id)arg2;
- (void)xmppRoster:(id)arg1 didAddUser:(id)arg2;
- (void)xmppRosterDidPopulate:(id)arg1;
- (void)updateRosterVersion;
- (id)loadGroupList;
- (id)loadBuddyList:(id)arg1;
- (id)createBuddyFromRosterUser:(id)arg1;
- (void)xmppRoster:(id)arg1 didAcceptedByBuddy:(id)arg2;
- (void)xmppRoster:(id)arg1 didReceivePresenceSubscriptionRequest:(id)arg2;
- (_Bool)rejectBuddyRequest:(id)arg1 reason:(id)arg2;
- (_Bool)acceptBuddyRequest:(id)arg1 addToRoster:(_Bool)arg2;
- (_Bool)removeBuddy:(id)arg1 removeFromRemoteParty:(_Bool)arg2;
- (_Bool)addBuddy:(id)arg1 message:(id)arg2 toGroups:(id)arg3 isAccept:(_Bool)arg4;
- (_Bool)addBuddy:(id)arg1 message:(id)arg2 toGroups:(id)arg3;
- (_Bool)addBuddy:(id)arg1 message:(id)arg2;
- (void)xmppMUC:(id)arg1 roomJID:(id)arg2 didNotCheckRoomExistency:(id)arg3;
- (void)xmppMUC:(id)arg1 roomJID:(id)arg2 didCheckRoomExistency:(id)arg3;
- (void)checkIfGroupExists:(id)arg1;
- (void)xmppMUC:(id)arg1 didReceiveBeKickFromGroup:(id)arg2;
- (void)xmppMUC:(id)arg1 didReceiveAcceptApplyJoinGroup:(id)arg2;
- (void)xmppMUC:(id)arg1 didReceiveRejectApplyJoinGroup:(id)arg2;
- (void)xmppMUC:(id)arg1 didReceiveApplyJoinGroup:(id)arg2;
- (void)xmppMUC:(id)arg1 roomJID:(id)arg2 didReceiveInvitationDecline:(id)arg3;
- (void)xmppMUC:(id)arg1 roomJID:(id)arg2 didReceiveInvitation:(id)arg3;
- (void)sendMessageForKickOccupant:(id)arg1 fromGroup:(id)arg2 groupName:(id)arg3;
- (void)acceptApplyJoinGroup:(id)arg1 groupname:(id)arg2 toApplicant:(id)arg3 reason:(id)arg4;
- (void)rejectApplyJoinGroup:(id)arg1 groupname:(id)arg2 toApplicant:(id)arg3 reason:(id)arg4;
- (void)rejectInvitationForGroup:(id)arg1 toInviter:(id)arg2 reason:(id)arg3;
- (void)xmppMUC:(id)arg1 didFetchAllPublicRoomList:(id)arg2;
- (void)fetchAllPublicGroups;
- (void)xmppMUC:(id)arg1 didFetchMyRoomsList:(id)arg2;
- (void)fetchMyGroupsList;
- (_Bool)roomJidIsEqualToUserJidStr:(id)arg1;
- (void)deactivateRoom:(id)arg1;
- (void)activateRoom:(id)arg1;
@property(readonly, nonatomic) _Bool isReconnecting; // @dynamic isReconnecting;
@property(readonly, nonatomic) _Bool isDisconnected; // @dynamic isDisconnected;
@property(readonly, nonatomic) _Bool isConnecting; // @dynamic isConnecting;
@property(readonly, nonatomic) _Bool isConnected; // @dynamic isConnected;
- (void)sendVersionInfo;
- (void)scheduleReconnect;
- (void)reconnectAfterTimeInterval:(double)arg1 updateServer:(_Bool)arg2;
- (void)cancelReconnecting;
- (_Bool)connectWithHost:(id)arg1;
- (_Bool)connect;
- (void)disconnect;
- (void)tryReconnectWithHost:(id)arg1;
- (void)tryReconnect;
- (void)xmppStream:(id)arg1 didReceiveError:(id)arg2;
- (_Bool)_isLoginFromOtherDevice:(id)arg1;
- (_Bool)_isServerShutdown:(id)arg1;
- (_Bool)_isRemovedFromServer:(id)arg1;
- (void)xmppStreamDidSecure:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveTrust:(struct __SecTrust *)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)xmppStream:(id)arg1 willSecureWithSettings:(id)arg2;
- (void)xmppStream:(id)arg1 didNotAuthenticate:(id)arg2;
- (void)xmppStreamDidAuthenticate:(id)arg1;
- (void)didConnectionChanged:(long long)arg1 fromConnectionType:(long long)arg2;
- (void)xmppStreamDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)xmppStreamDidConnect:(id)arg1;
- (id)errorWithXMPPMessage:(id)arg1;
- (void)xmppStream:(id)arg1 didFailToSendPresence:(id)arg2 error:(id)arg3;
- (void)xmppStream:(id)arg1 didFailToSendMessage:(id)arg2 error:(id)arg3;
- (void)xmppStream:(id)arg1 didFailToSendIQ:(id)arg2 error:(id)arg3;
- (void)xmppStream:(id)arg1 didSendPresence:(id)arg2;
- (void)xmppStream:(id)arg1 didSendMessage:(id)arg2;
- (void)xmppStream:(id)arg1 didSendIQ:(id)arg2;
- (id)xmppStream:(id)arg1 willSendPresence:(id)arg2;
- (id)xmppStream:(id)arg1 willSendMessage:(id)arg2;
- (id)xmppStream:(id)arg1 willSendIQ:(id)arg2;
- (void)_clearLoginInfo;
- (_Bool)loginWithJid:(id)arg1 password:(id)arg2 hostName:(id)arg3 hostPort:(int)arg4 error:(id *)arg5;
- (_Bool)_authenticate:(id *)arg1;
- (_Bool)_register:(id *)arg1;
- (_Bool)_isSentFromMyself:(id)arg1;
- (void)_sendImLoginTime:(double)arg1 chatLoginTime:(double)arg2;
- (void)_changeStatus:(long long)arg1;
- (void)setupStreamWithHostName:(id)arg1 hostPort:(int)arg2 needActivityRooms:(_Bool)arg3;
- (void)teardownStream;
- (void)unregisterNotifications;
- (void)registerNotifications;
@property(readonly, nonatomic) unsigned long long numberOfBytesReceived; // @dynamic numberOfBytesReceived;
@property(readonly, nonatomic) unsigned long long numberOfBytesSent; // @dynamic numberOfBytesSent;
- (void)xmppMUC:(id)arg1 didFetchAllChatroomList:(id)arg2;
- (void)fetchAllChatrooms;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

